@using HmsService.Models.Entities;
@using System.Globalization;
@model QA

@{
    ViewBag.Title = "Q&A";
    string curPath = Request.Url.GetLeftPart(UriPartial.Authority) + Request.ApplicationPath;
}

<div class="container" style="padding-top: 64px;">





    @if (Model == null)
    {
        <h2 class="error-qa-title">Hiện chưa có câu hỏi nào</h2>

    }
    else
    {
        <!-- Trigger the modal with a button -->
        <button type="button" class="btn btn-info btn-post-question" data-toggle="modal" data-target="#myModal">Đặt câu hỏi</button>
        <div class="col-md-12 col-xs-12">
            <div class="row">
                <button type="button" class="btn btn-default btn-sm btn-lastest-question">Câu hỏi mới nhất</button> &nbsp;
                <button type="button" class="btn btn-default btn-sm">Câu hỏi nổi bật</button>
            </div>
        </div>
        <div class="col-md-12 col-xs-12">
            <div class="row qa-container" id="qa-container">
                @foreach (var item in Model.Questions.OrderByDescending(q => q.CreateTime))
                {
                    <div class="card list-qa" id="list-qa-@(item.QuestionId)">
                        <div class="card main-qa">
                            <span class="username-content">@(item.Username): @(item.QuestionContent)</span>
                            <p class="like-rep">
                                <button id="btn-like-question-@(item.QuestionId)" class="btn btn-primary btn-sm btn-like-question" value="@(item.QuestionId)"><i class="fa fa-thumbs-o-up" aria-hidden="true"> </i> @(item.NumberOfLike)</button>
                                <button value="@(item.QuestionId)" id="btn-reply" class="btn btn-success btn-sm btn-reply" data-toggle="modal" data-target="#modalReply"><i class="fa fa-reply" aria-hidden="true"></i> Trả lời</button>
                            </p>
                            <span class="create-time">@(item.CreateTime)</span>

                        </div>

                        @foreach (var subItem in item.Comments)
                        {
                            <div class="card-header list-answer">
                                <span id="username-reply">@(subItem.Username): </span>
                                <span id="reply-content">@(subItem.CommentContent)</span>
                                <p class="like-rep">
                                    <button id="btn-like-reply-@(subItem.CommentId)" class="btn btn-primary btn-sm btn-like-reply" value="@(subItem.CommentId)"><i class="fa fa-thumbs-o-up" aria-hidden="true"> @(subItem.NumberOfLike)</i></button>
                                    @*<button value="@(item.QuestionId)" id="btn-reply-@(subItem.CommentId)" class="btn btn-success btn-sm btn-reply" data-toggle="modal" data-target="#modalReply"><i class="fa fa-reply" aria-hidden="true"></i> Reply</button>*@
                                </p>
                                @{
                                    var createTimeTmp = (DateTime)subItem.CreateTime;
                                    var createTime = createTimeTmp.ToString("dd/MM/yyyy HH:mm", CultureInfo.InvariantCulture);
                                }
                                <span id="reply-time">@(createTime)</span>
                            </div>
                        }

                    </div>
                }

            </div>
        </div>
    }

</div>

<!--Template list QA-->
<div style="display:none;" id="list-qa">
    <div class="card list-qa">
        <div class="card main-qa">
            <span class="username-content"></span>
            <p class="like-rep">
                <button class="btn btn-primary btn-sm btn-like-question" value=""><i class="fa fa-thumbs-o-up" aria-hidden="true"> 0</i></button>
                <button id="btn-reply" class="btn btn-success btn-sm btn-reply" data-toggle="modal" data-target="#modalReply"><i class="fa fa-reply" aria-hidden="true"></i> Trả lời</button>
            </p>
            <span class="create-time"></span>
        </div>
    </div>
</div>

<!--Template Reply-->
<div id="list-reply-template" style="display:none;">
    <div class="card-header list-answer">
        <span id="username-reply"></span>
        <span id="reply-content"></span>
        <p class="like-rep">
            <button class="btn btn-primary btn-sm btn-like-reply" value=""><i class="fa fa-thumbs-o-up" aria-hidden="true"></i> 0</button>
            @*<button id="btn-reply" class="btn btn-success btn-sm btn-reply" data-toggle="modal" data-target="#modalReply"><i class="fa fa-reply" aria-hidden="true"></i> Reply</button>*@
        </p>
        <span id="reply-time"></span>
        <br />
    </div>
</div>


<input type="hidden" id="questionId" value="" />

<!-- Modal Post New Question -->
<div class="modal fade" id="myModal" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Đặt câu hỏi</h4>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Tên người hỏi</label>
                    <input type="text" id="txtUsername" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Nội dung</label>
                    <textarea class="form-control" id="txtContent"></textarea>
                    <input type="hidden" id="new-question-id" />
                </div>

            </div>
            <div class="modal-footer">
                <button id="btnSendQuestion" type="button" class="btn btn-primary" data-dismiss="modal">Gửi</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Đóng</button>
            </div>
        </div>

    </div>
</div>

<!-- Modal Post New Question -->
<div class="modal fade" id="modalReply" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Trả lời</h4>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Tên người trả lời</label>
                    <input type="text" id="txtUsernameReply" class="form-control" />
                </div>
                <div class="form-group">
                    <label>Nội dung</label>
                    <textarea class="form-control" id="txtContentReply"></textarea>
                    <input type="hidden" id="questionId" value="" />
                </div>

            </div>
            <div class="modal-footer">
                <button id="btnSendReply" type="button" class="btn btn-primary" data-dismiss="modal">Gửi</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Đóng</button>
            </div>
        </div>

    </div>
</div>

<input type="hidden" value="@(Model != null ? Model.QAId : 0)" id="txt-qa-id" />
@section scripts {
    <script>
        var questionId;
        var urlApi = '@curPath/';
        $(function () {
            //var url = window.location.href;
            //console.log(url);
            //var url = "http://localhost:59917";
            //$.connection.hub.url = url + "/signalr/hubs";


            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;

            // Start the connection.
            $.connection.hub.start().done(function () {
                //Click send question
                $('#btnSendQuestion').click(function () {
                    // Call the Send method on the hub.


                    //chat.server.send($('#txtUsername').val(), $('#txtContent').val());
                    $.ajax({
                        url: urlApi + "api/question/AddQuestion",
                        method: "POST",
                        data: {
                            Username: $('#txtUsername').val(),
                            QuestionContent: $('#txtContent').val(),
                            NumberOfLike: 0,
                            QAId: $('#txt-qa-id').val()
                        },
                        success: function (data) {
                            chat.server.send($('#txtUsername').val(), $('#txtContent').val(), data.questionId);
                            $('#txtUsername').val("");
                            $('#txtContent').val("");
                        },
                        error: function (data) {
                            console.log(data);
                        }
                    });

                    //chat.server.send($('#txtUsername').val(), $('#txtContent').val());

                });

                //Click send reply of question
                $('#btnSendReply').click(function () {
                    var usernameRep = $('#txtUsernameReply').val();
                    var contentReply = $('#txtContentReply').val();
                    var questionId = $('#questionId').val();


                    $.ajax({
                        url: urlApi + "api/Comments",
                        method: "POST",
                        data: {
                            Username: usernameRep,
                            CommentContent: contentReply,
                            NumberOfLike: 0,
                            QuestionId: questionId

                        },
                        success: function (data) {
                            $('#txtUsernameReply').val("");
                            $('#txtContentReply').val("");
                            chat.server.sendReply(usernameRep, contentReply, questionId, data.commentId);
                        },
                        error: function (data) {
                            console.log(data);
                        }
                    });
                });

                //click like question
                $(document).on('click', '.btn-like-question', function () {
                    var questionId = $(this).attr('value');
                    var urlApiAjax = 'api/question/LikeQuestion';
                    var isLike = localStorage.getItem("" + questionId);

                    if (isLike == null) {
                        localStorage.setItem("" + questionId, "true");
                    }
                    else {
                        if (isLike == 'true') {
                            localStorage.setItem("" + questionId, "false");
                            urlApiAjax = 'api/question/DisLikeQuestion';
                        }
                        else {
                            localStorage.setItem("" + questionId, "true");
                        }
                    }
                    if (localStorage.getItem("" + questionId) == 'true') {
                        chat.server.likeQuestion(questionId, parseInt($(this).text()) + 1);
                    }
                    else {
                        chat.server.likeQuestion(questionId, parseInt($(this).text()) - 1);
                    }
                    $.ajax({
                        url: urlApi + urlApiAjax,
                        method: "POST",
                        data: {
                            QuestionId: questionId
                        },
                        success: function (data) {

                        },
                        error: function (data) {
                            console.log(data);
                        }
                    });
                });

                //Click like reply
                $(document).on('click', '.btn-like-reply', function () {
                    var commentId = $(this).attr('value');
                    var urlApiAjax = 'api/comment/LikeComment';
                    var isLikedComment = localStorage.getItem("CommentID" + commentId);
                    if (isLikedComment == null) {
                        localStorage.setItem("CommentID" + commentId, "true");
                    }
                    else {
                        if (isLikedComment == "true") {
                            localStorage.setItem("CommentID" + commentId, "false");
                            urlApiAjax = 'api/comment/DisLikeComment';
                        }
                        else {
                            localStorage.setItem("CommentID" + commentId, "true");
                        }
                    }

                    isLikedComment = localStorage.getItem("CommentID" + commentId) == "true";
                    if (isLikedComment == true) {
                        chat.server.likeComment(commentId, parseInt($(this).text()) + 1);
                    }
                    else {
                        chat.server.likeComment(commentId, parseInt($(this).text()) - 1);
                    }
                    $.ajax({
                        url: urlApi + urlApiAjax,
                        method: "POST",
                        data: {
                            CommentId: commentId
                        },
                        success: function (data) {

                        },
                        error: function (data) {
                            console.log(data);
                        }
                    });

                });


            });

            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function (name, message, newQuestionId) {
                // Add the message to the page.
                if (message.length != 0) {
                    var listQa = $('#list-qa').clone();
                    listQa.find('.username-content').html(name + ": " + message);
                    listQa.find('.create-time').html(new Date().toLocaleString("en-GB"));
                    listQa.find('.number-of-like').html('0');
                    listQa.find('.btn-reply').attr('value', newQuestionId);
                    listQa.find('.btn-like-question').attr('value', newQuestionId);
                    listQa.find('.list-qa').attr('id', 'list-qa-' + newQuestionId);
                    listQa.find('.btn-like-question').attr('id', 'btn-like-question-' + newQuestionId);
                    $('#qa-container').prepend(listQa.html());
                }


            };

            //Create a function that the hub call back to display reply
            chat.client.addNewReplyToPage = function (name, message, questionId, commentId) {
                // Add the message to the page.
                if (message.length != 0) {
                    var listReply = $('#list-reply-template').clone();
                    listReply.find('#username-reply').html(name + ": ");
                    listReply.find('#reply-content').html(message);
                    listReply.find('#reply-time').html(new Date().toLocaleString("en-GB"));
                    listReply.find('.btn-like-reply').attr('id', 'btn-like-reply-' + commentId);
                    listReply.find('.btn-like-reply').attr('value', commentId);
                    var listQaContainer = '#list-qa-' + questionId;
                    $(listQaContainer).append(listReply.html());
                }


            };

            //Create a function that hub call back to update new like of comment
            chat.client.updateNewLikeOfComment = function (commentId, newNumberOfLike) {
                var str = '<i class="fa fa-thumbs-o-up" aria-hidden="true"></i> ' + newNumberOfLike;
                $('#btn-like-reply-' + commentId).empty();
                $('#btn-like-reply-' + commentId).append(str);

            };

            //Create a function that hub call back to update new like of question
            chat.client.updateNewLikeOfQuestion = function (questionId, newNumberOfLike) {
                var str = '<i class="fa fa-thumbs-o-up" aria-hidden="true"></i> ' + newNumberOfLike;
                $('#btn-like-question-' + questionId).empty();
                $('#btn-like-question-' + questionId).append(str);
            };




            $(document).on('click', '.btn-reply', function () {
                $('#questionId').val($(this).attr('value'));
            });

        });

    </script>
}

