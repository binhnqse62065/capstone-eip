@using HmsService.Models.Entities;
@using System.Globalization;
@model QA

@{
    ViewBag.Title = "Hỏi đáp";
    string curPath = Request.Url.GetLeftPart(UriPartial.Authority) + Request.ApplicationPath;
    var random = new Random();
}

<div class="container" style="padding-top: 74px;">
    <div class="row">
        <div class="col-md-12 text-center voting-title">
            <h3>Hỏi đáp</h3>
        </div>
    </div>
    @if (Model == null)
    {
        <h3 class="text-center">Hiện chưa có câu hỏi nào</h3>

    }
    else
    {
        <!-- Trigger the modal with a button -->
        <div class="form-post-question input-group col-md-12 col-sm-12 col-lg-12">
            <span class="input-group-addon"><i class="fa fa-pencil-square-o" aria-hidden="true"></i></span>
            <input type="text" data-toggle="modal" data-target="#postQuestionModal" class="form-control question-content" placeholder="Nhập câu hỏi của bạn ở đây"></input>
        </div>
        @*<button type="button" class="btn btn-info btn-post-question" data-toggle="modal" data-target="#myModal">Đặt câu hỏi</button>*@
        <div class="col-md-12 col-xs-12 container-sort-question">

            <div class="input-group-btn group-button-filter-question">

                <button class="btn dropdown-toggle btn-filter-question float-right" data-toggle="dropdown" aria-expanded="false" id="cbSortQuestion">Sắp xếp câu hỏi</button>
                <ul class="dropdown-menu dropdown-filter-option">
                    @*<li class="change-filter-question" onclick="getAllQuestionCommentLastest(@Model.QAId)">Câu hỏi mới nhất</li>
        <hr />
        <li class="change-filter-question" onclick="getAllQuestionCommentHotest(@Model.QAId)">Câu hỏi nổi bật</li>*@
                    <li class="change-filter-question" onclick="filterQuestion(@Model.QAId, 'lastest')">Câu hỏi mới nhất</li>
                    <hr />
                    <li class="change-filter-question" onclick="filterQuestion(@Model.QAId, 'hotest')">Câu hỏi nổi bật</li>
                </ul>
            </div>


        </div>
        <div class="col-md-12 col-xs-12">
            <div class="row qa-container" id="qa-container">
                @foreach (var item in Model.Questions.OrderByDescending(q => q.CreateTime))
                {

                    <div class="card list-qa" id="list-qa-@(item.QuestionId)">


                        <div class="card main-qa @((bool)item.IsAnswer ? "answered-question" : "")">
                            <div class="question-item__header">
                                @{
                                    string[] userNameSplit = item.Username.Split();
                                    char firstCharacterName = userNameSplit[userNameSplit.Length - 1][0];
                                    var color = String.Format("#{0:X6}", random.Next(0x1000000));
                                    <div class="logo-name" style="background-color:@(color)">
                                        <span>@firstCharacterName.ToString().ToUpper()</span>
                                    </div>
                                }

                                @*<span><i class="fa fa-user-circle-o fa-3x" aria-hidden="true"></i></span>*@
                                <div class="question-item__header-center">
                                    <div class="question-item__author truncate">
                                        <span class="author__name">@(item.Username)</span>
                                        <br />
                                        <span class="question-item-date">@(item.CreateTime.Value.ToString("hh:mm tt"))</span>

                                    </div>
                                </div>

                                <div class="question-item__action-zone">
                                    <div class="score score--card">
                                        <button class="score__btn minus btn-plain btn-dislike" value="@(item.QuestionId)" id="btnDislikeQuestion-@(item.QuestionId)">
                                            <span><i class="fa fa-thumbs-down" aria-hidden="true"></i></span>
                                            @(item.NumberOfDislike)
                                        </button>
                                        <button class="score__btn plus btn-plain btn-like-question-template btn-like-question" id="btn-like-question-@(item.QuestionId)" value="@(item.QuestionId)">
                                            @(item.NumberOfLike)
                                            <span><i class="fa fa-thumbs-up" aria-hidden="true"></i></span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="row row-reply" >
                                <button class="score__btn minus btn-plain btn-rep  btn-reply btn-reply-question-template" value="@(item.QuestionId)" data-toggle="modal" data-target="#modalReply">
                                    <span><i class="fa fa-reply" aria-hidden="true"></i></span>
                                </button>
                            </div>
                            
                            <div class="question-item__body">
                                @(item.QuestionContent)
                            </div>

                        </div>

                        @foreach (var subItem in item.Comments)
                        {
                            <div class="card-header list-answer">
                                <div class="question-item__header">
                                    @{
                                        string[] userCommentSplit = subItem.Username.Split();
                                        char firstCharacterUserComment = userCommentSplit[userCommentSplit.Length - 1][0];
                                        var backgroundColor = String.Format("#{0:X6}", random.Next(0x1000000));
                                        <div class="logo-name" style="background-color:@(backgroundColor)">
                                            <span>@firstCharacterUserComment.ToString().ToUpper()</span>
                                        </div>
                                    }
                                    @*<span><i class="fa fa-user-circle-o fa-3x" aria-hidden="true"></i></span>*@
                                    <div class="question-item__header-center">
                                        <div class="question-item__author truncate">
                                            <span class="author__name">@(subItem.Username)</span>
                                            <br />
                                            <span class="question-item-date">@(subItem.CreateTime.Value.ToString("hh:mm tt"))</span>

                                        </div>
                                    </div>

                                    <div class="question-item__action-zone">
                                        <div class="score score--card">
                                            <button class="score__btn plus btn-plain btn-like-reply-template btn-like-reply" id="btn-like-reply-@(subItem.CommentId)" value="@(subItem.CommentId)">
                                                @(subItem.NumberOfLike)
                                                <span><i class="fa fa-thumbs-up" aria-hidden="true"></i></span>
                                            </button>
                                        </div>
                                    </div>


                                </div>
                                <div class="question-item__body">
                                    @(subItem.CommentContent)
                                </div>
                                @*<span id="username-reply">@(subItem.Username): </span>
                                    <span id="reply-content">@(subItem.CommentContent)</span>
                                    <p class="like-rep">
                                        <button class="btn btn-primary btn-sm"><i id="btn-like-reply-@(subItem.CommentId)" class="fa fa-thumbs-o-up  btn-like-reply" aria-hidden="true" value="@(subItem.CommentId)"> @(subItem.NumberOfLike)</i></button>
                                    </p>*@
                                @*@{
                                        var createTimeTmp = (DateTime)subItem.CreateTime;
                                        var createTime = createTimeTmp.ToString("dd/MM/yyyy HH:mm", CultureInfo.InvariantCulture);
                                    }
                                    <span id="reply-time">@(createTime)</span>*@
                            </div>
                        }

                    </div>
                }

            </div>
        </div>
    }

</div>

<!--Template list QA-->
<div style="display:none;" id="list-qa">
    <div class="card list-qa">
        
        <div class="card main-qa">
            <div class="icon-answer icon-answer-template">
                <i class="fa fa-check-circle " aria-hidden="true"></i>
            </div>
            <div class="question-item__header">
                <div class="logo-name">
                    <span></span>
                </div>
                @*<span><i class="fa fa-user-circle-o fa-3x" aria-hidden="true"></i></span>*@
                <div class="question-item__header-center">
                    <div class="question-item__author truncate">
                        <span class="author__name username-content"></span>
                        <br />
                        <span class="question-item-date create-time"></span>

                    </div>
                </div>

                <div class="question-item__action-zone">
                    <div class="score score--card">
                        <button class="score__btn minus btn-plain btn-dislike" value="">
                            <span><i class="fa fa-thumbs-down" aria-hidden="true"></i></span>

                        </button>
                        <button class="score__btn plus btn-plain btn-like-question-template btn-like-question" value="">

                            <span><i class="fa fa-thumbs-up" aria-hidden="true"></i></span>
                        </button>
                    </div>


                    @*<div class="score score--card">
                    <button data-toggle="modal" data-target="#modalReply" class="score__btn minus btn-plain btn-reply btn-reply-question-template" id="btn-reply" value="">
                        <span><i class="fa fa-reply" aria-hidden="true"></i></span>
                    </button>
                    <button class="score__btn plus btn-plain number-of-like btn-like-question-template btn-like-question" value="">
                        <span><i class="fa fa-thumbs-up" aria-hidden="true"></i>0</span>
                    </button>
                </div>*@
                </div>


            </div>
            <div class="row row-reply">
                <button class="score__btn minus btn-plain btn-rep  btn-reply btn-reply-question-template" data-toggle="modal" data-target="#modalReply">
                    <span><i class="fa fa-reply" aria-hidden="true"></i></span>
                </button>
            </div>
            <div class="question-item__body question-content-template">

            </div>

        </div>
    </div>
</div>

<!--Template Reply-->
<div id="list-reply-template" style="display:none;">
    <div class="card-header list-answer">

        <div class="question-item__header">
            <div class="logo-name">
                <span></span>
            </div>
            @*<span><i class="fa fa-user-circle-o fa-3x" aria-hidden="true"></i></span>*@
            <div class="question-item__header-center">
                <div class="question-item__author truncate">
                    <span class="author__name" id="username-reply"></span>
                    <br />
                    <span class="question-item-date" id="reply-time"></span>

                </div>
            </div>

            <div class="question-item__action-zone">
                <div class="score score--card">
                    @*<button class="score__btn minus btn-plain">
                    <span><i class="fa fa-reply" aria-hidden="true"></i></span>
                </button>*@
                    <button class="score__btn plus btn-plain  btn-like-reply-template btn-like-reply" value="">
                        0
                        <span><i class="fa fa-thumbs-up" aria-hidden="true"></i></span>
                    </button>
                </div>
            </div>


        </div>
        <div class="question-item__body" id="reply-content">
           
        </div>
        <br />
    </div>
</div>


<input type="hidden" id="questionId" value="" />

<!-- Modal Post New Question  -->
<div class="modal fade" id="postQuestionModal" role="dialog">
    <div class="modal-dialog modal-post-question">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header post-question-modal-header">
                <i class="fa fa-arrow-left" aria-hidden="true" data-dismiss="modal"></i>
                <h4 class="modal-title">Đặt câu hỏi</h4>
            </div>
            <div class="modal-body">
                <textarea id="txtContent" class="question-content-modal" placeholder="Nhập câu hỏi của bạn ở đây"></textarea>
            </div>
            <div class="modal-footer">
                <div class="input-group flex-auto">
                    <span class="input-group-addon"><i class="fa fa-user-circle-o" aria-hidden="true"></i></span>
                    <input id="txtUsername" type="text" class="question-input-content" placeholder="Nhập tên của bạn ở đây (tùy ý)" />
                </div>
                <button id="btnSendQuestion" type="button" class="btn btn-custom-defaul btn-send-question" data-dismiss="modal">Gửi</button>
            </div>
        </div>

    </div>
</div>

<!-- Modal Post Reply Question -->
<div class="modal fade" id="modalReply" role="dialog">
    <div class="modal-dialog modal-reply-question">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header post-question-modal-header">
                <i class="fa fa-arrow-left" aria-hidden="true" data-dismiss="modal"></i>
                <h4>Trả lời câu hỏi</h4>
            </div>
            <div class="modal-body">
                <textarea id="txtContentReply" class="question-content-modal" placeholder="Nhập phần trả lời của bạn ở đây"></textarea>
                @*<input type="hidden" id="questionId" value="" />*@
            </div>
            <div class="modal-footer">
                <div class="input-group flex-auto">
                    <span class="input-group-addon"><i class="fa fa-user-circle-o" aria-hidden="true"></i></span>
                    <input id="txtUsernameReply" type="text" class="question-input-content" placeholder="Nhập tên của bạn ở đây (tùy ý)" />
                </div>
                <button id="btnSendReply" type="button" class="btn btn-custom-defaul btn-send-question" data-dismiss="modal">Gửi</button>
            </div>
        </div>

    </div>
</div>




<input type="hidden" value="@(Model != null ? Model.QAId : 0)" id="txt-qa-id" />
@section scripts {
    <script>
        var questionId;
        var urlApi = '@curPath';
        var urlLike = 'api/question/LikeQuestion';
        var urlUnLike = 'api/question/UnLikeQuestion';
        var urlDisLike = 'api/question/DisLikeQuestion';
        var urlUnDisLike = 'api/question/UnDisLikeQuestion';
        $(function () {
            //chỉnh css cho biết thiết bị này đã like hay dislike câu hỏi nào
            addCssForQuestion();

            //var url = window.location.href;
            //console.log(url);
            //var url = "http://localhost:59917";
            //$.connection.hub.url = url + "/signalr/hubs";




        });



        // Reference the auto-generated proxy for the hub.
        var chat = $.connection.chatHub;

        // Start the connection.
        $.connection.hub.start().done(function () {
            //Click send question
            $('#btnSendQuestion').click(function () {
                // Call the Send method on the hub.


                //chat.server.send($('#txtUsername').val(), $('#txtContent').val());
                $.ajax({
                    url: urlApi + "api/question/AddQuestion",
                    method: "POST",
                    data: {
                        Username: $('#txtUsername').val(),
                        QuestionContent: $('#txtContent').val(),
                        NumberOfLike: 0,
                        QAId: $('#txt-qa-id').val()
                    },
                    success: function (data) {
                        chat.server.send($('#txtUsername').val(), $('#txtContent').val(), data.questionId);
                        $('#txtUsername').val("");
                        $('#txtContent').val("");
                    },
                    error: function (data) {
                        console.log(data);
                    }
                });

                //chat.server.send($('#txtUsername').val(), $('#txtContent').val());

            });

            //Click send reply of question
            $('#btnSendReply').click(function () {
                var usernameRep = $('#txtUsernameReply').val();
                var contentReply = $('#txtContentReply').val();
                var questionId = $('#questionId').val();


                $.ajax({
                    url: urlApi + "api/Comments",
                    method: "POST",
                    data: {
                        Username: usernameRep,
                        CommentContent: contentReply,
                        NumberOfLike: 0,
                        QuestionId: questionId

                    },
                    success: function (data) {
                        $('#txtUsernameReply').val("");
                        $('#txtContentReply').val("");
                        chat.server.sendReply(usernameRep, contentReply, questionId, data.commentId);
                    },
                    error: function (data) {
                        console.log(data);
                    }
                });
            });

            //click like question
            $(document).on('click', '.btn-like-question', function () {
                var questionId = parseInt($(this).attr('value'));
                var urlApiAjax = urlLike;
                //var status = localStorage.getItem("" + questionId);



                var listQuestionInteracted = JSON.parse(localStorage.getItem("listQuestion"));

                if (listQuestionInteracted != null) {
                    var questionStatus = listQuestionInteracted.find(e => e.questionId === questionId);
                    if (questionStatus != null) {
                        var currStatus = questionStatus.status;
                        if (currStatus === 'Liked') {
                            questionStatus.status = 'UnLiked';
                            chat.server.likeQuestion(questionId, parseInt($('#btn-like-question-' + questionId).text()) - 1, false);
                            callApiUpdateLikeOrDisLike(urlUnLike, questionId);
                        }
                        else if (currStatus === 'Disliked') {
                            questionStatus.status = 'Liked';
                            chat.server.disLikeQuestion(questionId, parseInt($('#btnDislikeQuestion-' + questionId).text()) - 1, false);
                            chat.server.likeQuestion(questionId, parseInt($('#btn-like-question-' + questionId).text()) + 1, true);
                            callApiUpdateLikeOrDisLike(urlUnDisLike, questionId);
                            callApiUpdateLikeOrDisLike(urlLike, questionId);
                        }
                        else {
                            questionStatus.status = 'Liked';
                            chat.server.likeQuestion(questionId, parseInt($('#btn-like-question-' + questionId).text()) + 1, true);
                            callApiUpdateLikeOrDisLike(urlLike, questionId);
                        }
                    }
                    else {
                        var questionStatusObject = { 'questionId': questionId, 'status': 'Liked' };
                        listQuestionInteracted.push(questionStatusObject);
                        chat.server.likeQuestion(questionId, parseInt($('#btn-like-question-' + questionId).text()) + 1, true);
                        callApiUpdateLikeOrDisLike(urlLike, questionId);
                    }
                    localStorage.setItem('listQuestion', JSON.stringify(listQuestionInteracted));
                }
                else {
                    var listQuestionInteractedNew = [];
                    var objectQuestion = { 'questionId': questionId, 'status': 'Liked' };
                    listQuestionInteractedNew.push(objectQuestion);
                    localStorage.setItem("listQuestion", JSON.stringify(listQuestionInteractedNew));
                    chat.server.likeQuestion(questionId, parseInt($('#btn-like-question-' + questionId).text()) + 1, true);
                    callApiUpdateLikeOrDisLike(urlLike, questionId);

                }
            });


            //click dislike question
            $(document).on('click', '.btn-dislike', function () {

                var questionId = parseInt($(this).attr('value'));
                var urlApiAjax = urlDisLike;
                //var status = localStorage.getItem("" + questionId);


                /* New */
                var listQuestionInteracted = JSON.parse(localStorage.getItem("listQuestion"));

                if (listQuestionInteracted != null) {
                    var questionStatus = listQuestionInteracted.find(e => e.questionId === questionId);
                    if (questionStatus != null) {
                        var currStatus = questionStatus.status;
                        if (currStatus === 'Disliked') {
                            questionStatus.status = 'UnDislike';
                            chat.server.disLikeQuestion(questionId, parseInt($('#btnDislikeQuestion-' + questionId).text()) - 1, false);
                            callApiUpdateLikeOrDisLike(urlUnDisLike, questionId);
                        }
                        else if (currStatus === 'Liked') {
                            questionStatus.status = 'Disliked';
                            chat.server.disLikeQuestion(questionId, parseInt($('#btnDislikeQuestion-' + questionId).text()) + 1, true);
                            chat.server.likeQuestion(questionId, parseInt($('#btn-like-question-' + questionId).text()) - 1, false);
                            callApiUpdateLikeOrDisLike(urlDisLike, questionId);
                            callApiUpdateLikeOrDisLike(urlUnLike, questionId);
                        }
                        else {
                            questionStatus.status = 'Disliked';
                            chat.server.disLikeQuestion(questionId, parseInt($('#btnDislikeQuestion-' + questionId).text()) + 1, true);
                            callApiUpdateLikeOrDisLike(urlDisLike, questionId);
                        }
                    }
                    else {
                        var questionStatusObject = { 'questionId': questionId, 'status': 'Disliked' };
                        listQuestionInteracted.push(questionStatusObject);
                        chat.server.disLikeQuestion(questionId, parseInt($('#btnDislikeQuestion-' + questionId).text()) + 1, true);
                        callApiUpdateLikeOrDisLike(urlDisLike, questionId);
                    }
                    localStorage.setItem('listQuestion', JSON.stringify(listQuestionInteracted));
                }
                else {
                    var listQuestionInteractedNew = [];
                    var objectQuestion = { 'questionId': questionId, 'status': 'Disliked' };
                    listQuestionInteractedNew.push(objectQuestion);
                    localStorage.setItem("listQuestion", JSON.stringify(listQuestionInteractedNew));
                    chat.server.disLikeQuestion(questionId, parseInt($('#btnDislikeQuestion-' + questionId).text()) + 1, true);
                    callApiUpdateLikeOrDisLike(urlDisLike, questionId);
                }



            });

            //Click like reply
            $(document).on('click', '.btn-like-reply', function () {
                var commentId = $(this).attr('value');
                var urlApiAjax = 'api/comment/LikeComment';
                var isLikedComment = localStorage.getItem("CommentID" + commentId);
                if (isLikedComment == null) {
                    localStorage.setItem("CommentID" + commentId, "true");
                }
                else {
                    if (isLikedComment == "true") {
                        localStorage.setItem("CommentID" + commentId, "false");
                        urlApiAjax = 'api/comment/DisLikeComment';
                    }
                    else {
                        localStorage.setItem("CommentID" + commentId, "true");
                    }
                }

                isLikedComment = localStorage.getItem("CommentID" + commentId) == "true";
                if (isLikedComment == true) {
                    chat.server.likeComment(commentId, parseInt($(this).text()) + 1, true);
                }
                else {
                    chat.server.likeComment(commentId, parseInt($(this).text()) - 1, false);
                }
                $.ajax({
                    url: urlApi + urlApiAjax,
                    method: "POST",
                    data: {
                        CommentId: commentId
                    },
                    success: function (data) {

                    },
                    error: function (data) {
                        console.log(data);
                    }
                });

            });


        });

        // Create a function that the hub can call back to display messages.
        chat.client.addNewMessageToPage = function (name, message, newQuestionId) {
            // Add the message to the page.
            if (message.length != 0) {
                var listQa = $('#list-qa').clone();
                listQa.find('.username-content').html(name);
                listQa.find('.question-content-template').html(message);
                listQa.find('.create-time').html(new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true }));
                //listQa.find('.number-of-like').html('0<span><i class="fa fa-thumbs-up" aria-hidden="true"></i></span>');
                listQa.find('.btn-reply').attr('value', newQuestionId);
                listQa.find('.btn-like-question').attr('value', newQuestionId);
                listQa.find('.list-qa').attr('id', 'list-qa-' + newQuestionId);
                listQa.find('.btn-like-question').attr('id', 'btn-like-question-' + newQuestionId);
                listQa.find('.btn-like-question').html('0 <span><i class="fa fa-thumbs-up" aria-hidden="true"></i></span>');
                listQa.find('.btn-dislike').attr('id', 'btnDislikeQuestion-' + newQuestionId);
                listQa.find('.btn-dislike').attr('value', newQuestionId);
                listQa.find('.btn-dislike').html('<span><i class="fa fa-thumbs-up" aria-hidden="true"></i></span> 0');

                var nameSplit = name.split();
                var firstNameChar = nameSplit[nameSplit.length - 1][0];
                listQa.find('.logo-name span').text(firstNameChar.toUpperCase());
                listQa.find('.logo-name').css('background-color', getRandomColor());

                $('#qa-container').prepend(listQa.html());
            }


        };

        //Create a function that the hub call back to display reply
        chat.client.addNewReplyToPage = function (name, message, questionId, commentId) {
            // Add the message to the page.
            if (message.length != 0) {
                var listReply = $('#list-reply-template').clone();
                listReply.find('#username-reply').html(name);
                listReply.find('#reply-content').html(message);
                listReply.find('#reply-time').html(new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true }));
                listReply.find('.btn-like-reply').attr('id', 'btn-like-reply-' + commentId);
                listReply.find('.btn-like-reply').attr('value', commentId);
                var listQaContainer = '#list-qa-' + questionId;
                $(listQaContainer).append(listReply.html());
            }


        };


        //Create a function that hub call back to update new like of question
        chat.client.updateNewLikeOfQuestion = function (questionId, newNumberOfLike, isLike) {
            var str = newNumberOfLike + ' <span><i class="fa fa-thumbs-up" aria-hidden="true"></i></span>';
            $('#btn-like-question-' + questionId).empty();
            $('#btn-like-question-' + questionId).append(str);
            if (isLike) {
                $('#btn-like-question-' + questionId + ' i').css('color', '#365899');
            }
            else {
                $('#btn-like-question-' + questionId + ' i').css('color', 'none');
            }
        };

        //Create a function that hub call back to update new dis like of question
        chat.client.updateNewDisLikeOfQuestion = function (questionId, newNumberOfLike, isDisLike) {
            var str = '<span><i class="fa fa-thumbs-down" aria-hidden="true"></i></span>' + newNumberOfLike;
            $('#btnDislikeQuestion-' + questionId).empty();
            $('#btnDislikeQuestion-' + questionId).append(str);
            if (isDisLike) {
                $('#btnDislikeQuestion-' + questionId + ' i').css('color', '#cc0000');
            }
            else {
                $('#btnDislikeQuestion-' + questionId + ' i').css('color', 'none');
            }
        };

        //Create a function that hub call back to update new like of comment
        chat.client.updateNewLikeOfComment = function (commentId, newNumberOfLike, isLike) {
            var str = newNumberOfLike + ' <span><i class="fa fa-thumbs-up" aria-hidden="true"></i></span>';
            $('#btn-like-reply-' + commentId).empty();
            $('#btn-like-reply-' + commentId).append(str);

            if (isLike) {
                $('#btn-like-reply-' + commentId + ' i').css('color', '#365899');
            }
            else {
                $('#btn-like-reply-' + commentId + ' i').css('color', 'none');
            }

        };





        //Change questionId when click button reply to know what question will be reply
        $(document).on('click', '.btn-reply', function () {
            $('#questionId').val($(this).attr('value'));
        });


        /*Filter câu hỏi mới nhất, hot nhất */
        function filterQuestion(id, type) {
            var urlApiFilter = '';
            if (type === 'lastest') {
                $('#cbSortQuestion').text('Câu hỏi mới nhất');
                urlApiFilter = '/api/question/getAllQuestionCommentByCreateTime';
            }
            else {
                $('#cbSortQuestion').text('Câu hỏi nổi bật');
                urlApiFilter = '/api/question/getAllQuestionCommentByLike';
            }
            

            $.ajax({
                url: urlApi + urlApiFilter,
                method: "POST",
                data: {
                    QAId: id
                },
                success: function (data) {
                    var listQuestionInteracted = JSON.parse(localStorage.getItem("listQuestion"));


                    $('#qa-container').empty();
                    for (var i = 0; i < data.data.length; i++) {
                        var templateQuestion = $('#list-qa').clone();
                        if (data.data[i].IsAnswer != null) {
                            if (data.data[i].IsAnswer == true) {

                                templateQuestion.find('.main-qa').addClass('answered-question');
                            }
                        }

                        var usernamePostQuestionSplit = data.data[i].Username.split(' ');
                        var firstCharacterName = usernamePostQuestionSplit[usernamePostQuestionSplit.length - 1][0];
                        templateQuestion.find('.logo-name span').html(firstCharacterName.toUpperCase());
                        templateQuestion.find('.logo-name').css('background-color', getRandomColor());
                        templateQuestion.find('.username-content').html(data.data[i].Username);
                        templateQuestion.find('.question-content-template').html(data.data[i].QuestionContent);
                        templateQuestion.find('.create-time').html('' + data.data[i].CreateTime.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true }) + '');
                        templateQuestion.find('.list-qa').attr('id', 'list-qa-' + data.data[i].QuestionId + '');
                        templateQuestion.find('.btn-like-question').attr('id', 'btn-like-question-' + data.data[i].QuestionId + '');
                        templateQuestion.find('.btn-like-question').attr('value', '' + data.data[i].QuestionId + '');
                        templateQuestion.find('#btn-reply').attr('value', '' + data.data[i].QuestionId + '');
                        templateQuestion.find('.btn-dislike').attr('id', 'btnDislikeQuestion-' + data.data[i].QuestionId);
                        templateQuestion.find('.btn-dislike').attr('value', data.data[i].QuestionId);
                        templateQuestion.find('.btn-dislike').html('<span><i class="fa fa-thumbs-down" aria-hidden="true"></i></span> ' + data.data[i].NumberOfDisLike);

                        templateQuestion.find('.btn-like-question').html(data.data[i].NumberOfLike + '<span><i class="fa fa-thumbs-up" aria-hidden="true"></i></span>');

                        /*Set màu cho nút đã like hay dislike*/
                        if (listQuestionInteracted != null) {
                            var questionInteractedTmp = listQuestionInteracted.find(e => e.questionId === data.data[i].QuestionId);
                            if (questionInteractedTmp != null) {
                                var status = questionInteractedTmp.status;
                                if (status === 'Liked') {
                                    templateQuestion.find('.btn-like-question span i').css('color', '#365899');
                                }
                                else if (status === 'Disliked') {
                                    templateQuestion.find('.btn-dislike span i').css('color', '#cc0000');
                                }
                            }
                        }
                        $('#qa-container').append(templateQuestion.html());
                        for (var j = 0; j < data.data[i].Comments.length; j++) {
                            var templateComment = $('#list-reply-template').clone();
                            var usernamePostQuestionSplit = data.data[i].Comments[j].Username.split(' ');
                            var firstCharacterName = usernamePostQuestionSplit[usernamePostQuestionSplit.length - 1][0];
                            templateComment.find('.logo-name span').html(firstCharacterName.toUpperCase());
                            templateComment.find('.logo-name').css('background-color', getRandomColor());
                            templateComment.find('.list-answer').attr('id', 'comment-' + data.data[i].Comments[j].CommentId + '');
                            templateComment.find('.btn-like-reply').attr('id', 'btn-like-reply-' + data.data[i].Comments[j].CommentId + '');
                            templateComment.find('.btn-like-reply').attr('value', '' + data.data[i].Comments[j].CommentId + '');
                            templateComment.find('#username-reply').text('' + data.data[i].Comments[j].Username + ': ');
                            templateComment.find('#reply-content').text('' + data.data[i].Comments[j].CommentContent + '');
                            templateComment.find('#reply-time').text('' + data.data[i].Comments[j].CreateTime.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true }) + '');
                            templateComment.find('.btn-like-reply').html(data.data[i].Comments[j].NumberOfLike + '<span><i class="fa fa-thumbs-up" aria-hidden="true"></i></span>');
                            $('#list-qa-' + data.data[i].QuestionId + '').append(templateComment.html());
                        }
                    }
                },
                error: function (data) {
                    console.log(data);
                }
            });
        }

        /*Random màu cho các ô tên*/
        function getRandomColor() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

        /*Dùng để gọi api update số like hay dislike dựa vào id và url truyền vô*/
        function callApiUpdateLikeOrDisLike(urlApiAjax, questionId) {
            $.ajax({
                url: urlApi + urlApiAjax,
                method: "POST",
                data: {
                    QuestionId: questionId
                },
                success: function (data) {

                },
                error: function (data) {
                    console.log(data);
                }
            });
        }


        //Dùng để chỉnh css like hay dislike cho các nút đã từng like hoạc dislike ở local storage
        function addCssForQuestion() {
            var listQuestionInteracted = JSON.parse(localStorage.getItem("listQuestion"));
            if (listQuestionInteracted != null) {
                for (var i = 0; i < listQuestionInteracted.length; i++) {
                    var tmpQuestion = listQuestionInteracted[i];
                    if (tmpQuestion.status === 'Liked') {
                        $('#btn-like-question-' + tmpQuestion.questionId + ' span i').css('color','#365899');
                    }
                    else if (tmpQuestion.status === 'Disliked') {
                        $('#btnDislikeQuestion-' + tmpQuestion.questionId + ' span i').css('color', '#cc0000');
                    }
                }
            }
        }

    </script>
}

